candidateList = {
    "sunpu": "candidate-1",
    "wangting": "candidate-2",
    "haha": "candidate-3"
};

//页面加载时获取web3对象 
flag = false;
window.addEventListener('load', function () {
    // 检查web3是否已经注入到(Mist/MetaMask) 
    if (typeof web3 !== 'undefined') {
        // 使用Mist/MetaMask的提供者
        web3js = new Web3(web3.currentProvider);
    } else {
        // 处理用户没安装的情况，比如显示一个消息// 
        //告诉他们要安装 MetaMask 来使用我们的应用 
        web3js = new Web3(new Web3.providers
            .HttpProvider("HTTP://127.0.0.1:7545"));
    }
    // 现在你可以启动你的应用并自由访问 
    startApp();
})


var ballotContract;

function startApp() {
    var abi = [{
            "constant": true,
            "inputs": [{
                "name": "candidate",
                "type": "bytes32"
            }],
            "name": "totalVotesFor",
            "outputs": [{
                "name": "",
                "type": "uint8"
            }],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [{
                "name": "candidate",
                "type": "bytes32"
            }],
            "name": "validCandidate",
            "outputs": [{
                "name": "",
                "type": "bool"
            }],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [{
                "name": "",
                "type": "bytes32"
            }],
            "name": "votesReceived",
            "outputs": [{
                "name": "",
                "type": "uint8"
            }],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [{
                "name": "",
                "type": "uint256"
            }],
            "name": "candidateList",
            "outputs": [{
                "name": "",
                "type": "bytes32"
            }],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [{
                "name": "candidate",
                "type": "bytes32"
            }],
            "name": "voteForCandidate",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [{
                "name": "candidateNames",
                "type": "bytes32[]"
            }],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "constructor"
        }
    ];
    var contractAddress = '0xa86490B9D96cbc830B70BEef5542982de8435ABf';
    ballotContract = new web3js.eth.Contract(abi, contractAddress);
    voteCount();

}


function voteCount() {
    var candidateNames = Object.keys(candidateList);
    for (var i = 0; i < candidateNames.length; i++) {
        let name = candidateNames[i];
        ballotContract.methods.totalVotesFor(web3js.utils.toHex(name))
            .call(function (error, result) {
                $("#" + candidateList[name]).html(result);
            });
    }
}

function voteForCandidate(name) {
    //调用vote 函数 
    try {
        web3js.eth.getAccounts(function (error, accounts) {
            ballotContract.methods.voteForCandidate(web3js.utils.toHex(name))
                .send({
                        from: accounts[0],
                        gas: 300000
                    },
                    function (error) {

                        ballotContract.methods.totalVotesFor(web3js.utils.toHex(name))
                            .call(function (error, result) {
                                $("#" + candidateList[name]).html(result);
                            });
                    });
        });
    } catch (error) {

    }
}